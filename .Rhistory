legend.title=element_blank(),
legend.background = element_rect(fill = 'transparent',  colour = "transparent"),
axis.text = element_text(colour = "black", size=14),
axis.title = element_text(colour = "black", size=12),
panel.background = element_rect(fill = 'white', colour = 'gray'),
panel.grid.minor = element_blank(),
panel.grid.major.y = element_line(colour = "#eaeaea"),
panel.grid.major.y = element_blank())
resplot <- resplot + scale_colour_manual(values=c("#2171b5","#c0c0c0","#4292c6"), breaks=c("NoPolicy", "Ticket","Random"), labels=c("nLDE Not Adaptive", "nLDE Selective", "nLDE Random"))
#resplot <- resplot + scale_x_discrete(limits=c(0,50,100,150,200,250,300))
##resplot <- resplot + scale_y_discrete(limits=c(0,5000,10000,15000,20000))
##resplot <- resplot + scale_fill_manual(values=c("#2171b5",NA,NA), breaks=c("NoPolicy", "Ticket","Random"), labels=c("nLDE(Not Adaptive)", "nLDE(Selectivity)", "nLDE(Random)"))
resplot <- resplot + scale_shape_discrete(solid=T, breaks=c("NoPolicy", "Ticket","Random"), labels=c("nLDE Not Adaptive", "nLDE Selectivity", "nLDE Random"))
print(resplot)
# Random
random2 <- subset(random, tuple <=m)
resplot <- ggplot(data=results,aes(x=results$time, y=results$tuple))
resplot <- resplot + geom_point(aes(colour=policy, shape=policy), size=3)
#resplot <- resplot + ggtitle(q)
resplot <- resplot + ggtitle("Query 1")
#resplot <- resplot + geom_segment(aes(x=random[m,]$time, y=0, yend=m, xend=random[m,]$time))
#resplot <- resplot + geom_segment(aes(x=-1, y=m, yend=m, xend=random[m,]$time))
resplot <- resplot + xlab('Time (sec.)') +  ylab('# Answers Produced') #+  xlim(c=(0,310))
##resplot <- resplot + geom_polygon(data=nopolicy2, aes(x=nopolicy2$time, y=nopolicy2$tuple))
#resplot <- resplot + geom_area(data=random2, aes(x=random2$time, y=random2$tuple), alpha=1/5, show.legend=FALSE)
resplot <- resplot + theme(
legend.justification=c(0,1), legend.position=c(0,1),
legend.text = element_text(size = 16),
legend.title=element_blank(),
legend.background = element_rect(fill = 'transparent',  colour = "transparent"),
axis.text = element_text(colour = "black", size=14),
axis.title = element_text(colour = "black", size=12),
panel.background = element_rect(fill = 'white', colour = 'gray'),
panel.grid.minor = element_blank(),
panel.grid.major.y = element_line(colour = "#eaeaea"),
panel.grid.major.y = element_blank())
resplot <- resplot + scale_colour_manual(values=c("#2171b5","#c0c0c0","#4292c6"), breaks=c("NoPolicy", "Ticket","Random"), labels=c("nLDE Not Adaptive", "nLDE Selective", "nLDE Random"))
##resplot <- resplot + scale_x_discrete(expand = c(0,0)) + scale_y_discrete(expand = c(0,0))
#resplot <- resplot + scale_x_discrete(limits=c(0,50,100,150,200,250,300))
##resplot <- resplot + scale_y_discrete(limits=c(0,5000,10000,15000,20000))
##resplot <- resplot + scale_fill_manual(values=c("#2171b5",NA,NA), breaks=c("NoPolicy", "Ticket","Random"), labels=c("nLDE(Not Adaptive)", "nLDE(Selectivity)", "nLDE(Random)"))
resplot <- resplot + scale_shape_discrete(solid=T, breaks=c("NoPolicy", "Ticket","Random"), labels=c("nLDE Not Adaptive", "nLDE Selective", "nLDE Random"))
print(resplot)
#source('~/diefMetrics.R')
#' experiment1
#'
#' This function reproduces the results reported in Experiment 1.
#' @keywords dieft, diefficiency
#' @author Maribel Acosta
#' @import ggplot2
#' @import fmsb
#' @import GISTools
#' @import plyr
#' @export experiment1
#' @seealso experiment2, dieft
#'
experiment1 <- function() {
# Input data: Outcome of query execution.
traces <- read.csv("data/nLDE-Benchmark1-AnswerTrace.csv")
metrics <- read.csv("data/nLDE-Benchmark1-Metrics.csv")
# Compute further metrics: throughput, inverse of execution time, inverse of time for the first tuple.
metrics$throughput <- with(metrics, metrics$comp/metrics$totaltime)
metrics$invtfft <- with(metrics, 1/metrics$tfft)
metrics$invtotaltime <- with(metrics, 1/metrics$totaltime)
# Obtain queries.
queries <- unique(traces$query)
# Compute dieft.
dieftDF <- data.frame(query=character(), approach=character(), dieft=double(), stringsAsFactors=TRUE)
for (q in queries) {
print(c("Computing dieft for all approaches for query ", q))
dieftDF <- rbind(dieftDF, dieft(traces, q))
}
# Merge conventional metrics and dieft into a single dataframe.
allmetrics <- merge(metrics, dieftDF)
# Plot metrics using spiderplot.
keeps <- c("invtfft", "invtotaltime", "comp", "throughput", "dieft")
for (q in queries) {
data <- subset(allmetrics, query==q)
data <- data[keeps]
maxs <- data.frame(invtfft=max(data$invtfft), invtotaltime=max(data$invtotaltime), comp=max(data$comp), throughput=max(data$throughput), dieft=max(data$dieft))
mins <- data.frame(invtfft=0, invtotaltime=0, comp=0, throughput=0, dieft=0)
data <- rbind(maxs, mins ,data)
colors_border=c("#2274A5","#F75C03","#4CB944")
colors_in=add.alpha(colors_border, 0.15)
radarchart( data,
pcol=colors_border , pfcol=colors_in, plwd=4 , plty=1,
cglcol="grey", cglty=1, axislabcol="grey", cglwd=1.0,
vlcex=1.5,
title=q,
vlabels=c("(TFFF)^-1", "(ET)^-1", "Comp", "T", "dief@t"))
legend(x=0.7, y=1, legend = c("NA", "Ran", "Sel"), bty = "n", pch=20 , col=colors_border , text.col = "black", cex=1.3, pt.cex=3)
}
return(allmetrics)
}
#' experiment2
#'
#' This function reproduces the results reported in Experiment 2.
#' @keywords diefk, diefficiency
#' @author Maribel Acosta
#' @import ggplot2
#' @import fmsb
#' @import GISTools
#' @import plyr
#' @export experiment2
#' @seealso experiment1, diefk2
#'
experiment2 <- function() {
# Input data: Outcome of query execution.
traces <- read.csv("data/nLDE-Benchmark1-AnswerTrace.csv")
# Obtain queries.
queries <- unique(traces$query)
# Compute diefk for different k%: 25, 50, 75, 100.
diefkDF <- data.frame(query=character(), approach=character(), "diefk25"=double(), "diefk50"=double(), "diefk75"=double(), "diefk100"=double())
keeps <- c("diefk25", "diefk50", "diefk75", "diefk100")
for (q in queries) {
print(c("Computing diefk for all approaches for query ", q))
k25DF <- diefk2(traces, q, 0.25)
k25DF <- rename(k25DF, c("diefk"="diefk25"))
k50DF <- diefk2(traces, q, 0.50)
k50DF <- rename(k50DF, c("diefk"="diefk50"))
k75DF <- diefk2(traces, q, 0.75)
k75DF <- rename(k75DF, c("diefk"="diefk75"))
k100DF <- diefk2(traces, q, 1.00)
k100DF <- rename(k100DF, c("diefk"="diefk100"))
x <- cbind(k25DF, k50DF, k75DF, k100DF)
diefkDF <- rbind(diefkDF, x)
x <- x[keeps]
maxs <- data.frame(diefk25=max(x$diefk25), diefk50=max(x$diefk50), diefk75=max(x$diefk75), diefk100=max(x$diefk100))
mins <- data.frame(diefk25=0, diefk50=0,  diefk75=0, diefk100=0)
data <- rbind(mins, maxs, x)
print(data)
colors_border=c("#2274A5","#F75C03","#4CB944")
colors_in=add.alpha(colors_border, 0.15)
radarchart( data,
pcol=colors_border , pfcol=colors_in, plwd=4 , plty=1,
cglcol="grey", cglty=1, axislabcol="grey", cglwd=1.0,
vlcex=1.5,
title=q,
vlabels=c("k=25%", "k=50%", "k=75%", "k=100%"))
legend(x=0.7, y=1, legend = c("NA", "Ran", "Sel"), bty = "n", pch=20 , col=colors_border , text.col = "black", cex=1.3, pt.cex=3)
}
return(diefkDF)
}
#source('~/diefMetrics.R')
#' experiment1
#'
#' This function reproduces the results reported in Experiment 1.
#' @keywords dieft, diefficiency
#' @author Maribel Acosta
#' @import ggplot2
#' @import fmsb
#' @import GISTools
#' @import plyr
#' @export experiment1
#' @seealso experiment2, dieft
#'
experiment1 <- function() {
# Input data: Outcome of query execution.
traces <- read.csv("/Users/maribelacosta/Repositories/nLDE-Benchmark1-AnswerTrace.csv")
metrics <- read.csv("/Users/maribelacosta/Repositories/nLDE-Benchmark1-Metrics.csv")
# Compute further metrics: throughput, inverse of execution time, inverse of time for the first tuple.
metrics$throughput <- with(metrics, metrics$comp/metrics$totaltime)
metrics$invtfft <- with(metrics, 1/metrics$tfft)
metrics$invtotaltime <- with(metrics, 1/metrics$totaltime)
# Obtain queries.
queries <- unique(traces$query)
# Compute dieft.
dieftDF <- data.frame(query=character(), approach=character(), dieft=double(), stringsAsFactors=TRUE)
for (q in queries) {
print(c("Computing dieft for all approaches for query ", q))
dieftDF <- rbind(dieftDF, dieft(traces, q))
}
# Merge conventional metrics and dieft into a single dataframe.
allmetrics <- merge(metrics, dieftDF)
# Plot metrics using spiderplot.
keeps <- c("invtfft", "invtotaltime", "comp", "throughput", "dieft")
for (q in queries) {
data <- subset(allmetrics, query==q)
data <- data[keeps]
maxs <- data.frame(invtfft=max(data$invtfft), invtotaltime=max(data$invtotaltime), comp=max(data$comp), throughput=max(data$throughput), dieft=max(data$dieft))
mins <- data.frame(invtfft=0, invtotaltime=0, comp=0, throughput=0, dieft=0)
data <- rbind(maxs, mins ,data)
colors_border=c("#2274A5","#F75C03","#4CB944")
colors_in=add.alpha(colors_border, 0.15)
radarchart( data,
pcol=colors_border , pfcol=colors_in, plwd=4 , plty=1,
cglcol="grey", cglty=1, axislabcol="grey", cglwd=1.0,
vlcex=1.5,
title=q,
vlabels=c("(TFFF)^-1", "(ET)^-1", "Comp", "T", "dief@t"))
legend(x=0.7, y=1, legend = c("NA", "Ran", "Sel"), bty = "n", pch=20 , col=colors_border , text.col = "black", cex=1.3, pt.cex=3)
}
return(allmetrics)
}
#' experiment2
#'
#' This function reproduces the results reported in Experiment 2.
#' @keywords diefk, diefficiency
#' @author Maribel Acosta
#' @import ggplot2
#' @import fmsb
#' @import GISTools
#' @import plyr
#' @export experiment2
#' @seealso experiment1, diefk2
#'
experiment2 <- function() {
# Input data: Outcome of query execution.
traces <- read.csv("/Users/maribelacosta/Repositories/nLDE-Benchmark1-AnswerTrace.csv")
# Obtain queries.
queries <- unique(traces$query)
# Compute diefk for different k%: 25, 50, 75, 100.
diefkDF <- data.frame(query=character(), approach=character(), "diefk25"=double(), "diefk50"=double(), "diefk75"=double(), "diefk100"=double())
keeps <- c("diefk25", "diefk50", "diefk75", "diefk100")
for (q in queries) {
print(c("Computing diefk for all approaches for query ", q))
k25DF <- diefk2(traces, q, 0.25)
k25DF <- rename(k25DF, c("diefk"="diefk25"))
k50DF <- diefk2(traces, q, 0.50)
k50DF <- rename(k50DF, c("diefk"="diefk50"))
k75DF <- diefk2(traces, q, 0.75)
k75DF <- rename(k75DF, c("diefk"="diefk75"))
k100DF <- diefk2(traces, q, 1.00)
k100DF <- rename(k100DF, c("diefk"="diefk100"))
x <- cbind(k25DF, k50DF, k75DF, k100DF)
diefkDF <- rbind(diefkDF, x)
x <- x[keeps]
maxs <- data.frame(diefk25=max(x$diefk25), diefk50=max(x$diefk50), diefk75=max(x$diefk75), diefk100=max(x$diefk100))
mins <- data.frame(diefk25=0, diefk50=0,  diefk75=0, diefk100=0)
data <- rbind(mins, maxs, x)
print(data)
colors_border=c("#2274A5","#F75C03","#4CB944")
colors_in=add.alpha(colors_border, 0.15)
radarchart( data,
pcol=colors_border , pfcol=colors_in, plwd=4 , plty=1,
cglcol="grey", cglty=1, axislabcol="grey", cglwd=1.0,
vlcex=1.5,
title=q,
vlabels=c("k=25%", "k=50%", "k=75%", "k=100%"))
legend(x=0.7, y=1, legend = c("NA", "Ran", "Sel"), bty = "n", pch=20 , col=colors_border , text.col = "black", cex=1.3, pt.cex=3)
}
return(diefkDF)
}
experiment2()
experiment2()
colors_in=alpha(colors_border, 0.15)
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("GISTools", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
radarchart( data,
)
pcol=colors_border , pfcol=colors_in, plwd=4 , plty=1,
#source('~/diefMetrics.R')
#' experiment1
#'
#' This function reproduces the results reported in Experiment 1.
#' @keywords dieft, diefficiency
#' @author Maribel Acosta
#' @import ggplot2
#' @import fmsb
#' @import GISTools
#' @import plyr
#' @export experiment1
#' @seealso experiment2, dieft
#'
experiment1 <- function() {
# Input data: Outcome of query execution.
traces <- read.csv("/Users/maribelacosta/Repositories/nLDE-Benchmark1-AnswerTrace.csv")
metrics <- read.csv("/Users/maribelacosta/Repositories/nLDE-Benchmark1-Metrics.csv")
# Compute further metrics: throughput, inverse of execution time, inverse of time for the first tuple.
metrics$throughput <- with(metrics, metrics$comp/metrics$totaltime)
metrics$invtfft <- with(metrics, 1/metrics$tfft)
metrics$invtotaltime <- with(metrics, 1/metrics$totaltime)
# Obtain queries.
queries <- unique(traces$query)
# Compute dieft.
dieftDF <- data.frame(query=character(), approach=character(), dieft=double(), stringsAsFactors=TRUE)
for (q in queries) {
print(c("Computing dieft for all approaches for query ", q))
dieftDF <- rbind(dieftDF, dieft(traces, q))
}
# Merge conventional metrics and dieft into a single dataframe.
allmetrics <- merge(metrics, dieftDF)
# Plot metrics using spiderplot.
keeps <- c("invtfft", "invtotaltime", "comp", "throughput", "dieft")
for (q in queries) {
data <- subset(allmetrics, query==q)
data <- data[keeps]
maxs <- data.frame(invtfft=max(data$invtfft), invtotaltime=max(data$invtotaltime), comp=max(data$comp), throughput=max(data$throughput), dieft=max(data$dieft))
mins <- data.frame(invtfft=0, invtotaltime=0, comp=0, throughput=0, dieft=0)
data <- rbind(maxs, mins ,data)
colors_border=c("#2274A5","#F75C03","#4CB944")
colors_in=alpha(colors_border, 0.15)
radarchart( data,
pcol=colors_border , pfcol=colors_in, plwd=4 , plty=1,
cglcol="grey", cglty=1, axislabcol="grey", cglwd=1.0,
vlcex=1.5,
title=q,
vlabels=c("(TFFF)^-1", "(ET)^-1", "Comp", "T", "dief@t"))
legend(x=0.7, y=1, legend = c("NA", "Ran", "Sel"), bty = "n", pch=20 , col=colors_border , text.col = "black", cex=1.3, pt.cex=3)
}
return(allmetrics)
}
#' experiment2
#'
#' This function reproduces the results reported in Experiment 2.
#' @keywords diefk, diefficiency
#' @author Maribel Acosta
#' @import ggplot2
#' @import fmsb
#' @import GISTools
#' @import plyr
#' @export experiment2
#' @seealso experiment1, diefk2
#'
experiment2 <- function() {
# Input data: Outcome of query execution.
traces <- read.csv("/Users/maribelacosta/Repositories/nLDE-Benchmark1-AnswerTrace.csv")
# Obtain queries.
queries <- unique(traces$query)
# Compute diefk for different k%: 25, 50, 75, 100.
diefkDF <- data.frame(query=character(), approach=character(), "diefk25"=double(), "diefk50"=double(), "diefk75"=double(), "diefk100"=double())
keeps <- c("diefk25", "diefk50", "diefk75", "diefk100")
for (q in queries) {
print(c("Computing diefk for all approaches for query ", q))
k25DF <- diefk2(traces, q, 0.25)
k25DF <- rename(k25DF, c("diefk"="diefk25"))
k50DF <- diefk2(traces, q, 0.50)
k50DF <- rename(k50DF, c("diefk"="diefk50"))
k75DF <- diefk2(traces, q, 0.75)
k75DF <- rename(k75DF, c("diefk"="diefk75"))
k100DF <- diefk2(traces, q, 1.00)
k100DF <- rename(k100DF, c("diefk"="diefk100"))
x <- cbind(k25DF, k50DF, k75DF, k100DF)
diefkDF <- rbind(diefkDF, x)
x <- x[keeps]
maxs <- data.frame(diefk25=max(x$diefk25), diefk50=max(x$diefk50), diefk75=max(x$diefk75), diefk100=max(x$diefk100))
mins <- data.frame(diefk25=0, diefk50=0,  diefk75=0, diefk100=0)
data <- rbind(mins, maxs, x)
print(data)
colors_border=c("#2274A5","#F75C03","#4CB944")
colors_in=alpha(colors_border, 0.15)
radarchart( data,
pcol=colors_border , pfcol=colors_in, plwd=4 , plty=1,
cglcol="grey", cglty=1, axislabcol="grey", cglwd=1.0,
vlcex=1.5,
title=q,
vlabels=c("k=25%", "k=50%", "k=75%", "k=100%"))
legend(x=0.7, y=1, legend = c("NA", "Ran", "Sel"), bty = "n", pch=20 , col=colors_border , text.col = "black", cex=1.3, pt.cex=3)
}
return(diefkDF)
}
experiment2()
library(dief)
resplot <- resplot + ggtitle("Query 1")
t <- "/Users/maribelacosta/Repositories/nLDE-Benchmark1-AnswerTrace.csv"
exp2 <- dief::experiment2(t)
plotExperiment2(exp2)
library(dief)
plotExperiment2(exp2)
library(dief)
plotExperiment2(exp2)
plotExperiment2(exp2)
library(dief)
plotExperiment2(exp2)
library(dief)
plotExperiment2(exp2)
library(dief)
plotExperiment2(exp2)
library(dief)
library(dief)
library(dief)
plotExperiment2(exp2)
library(dief)
plotExperiment2(exp2)
library(dief)
plotExperiment2(exp2)
library(dief)
plotExperiment2(exp2)
library(dief)
plotExperiment2(exp2)
library(dief)
plotExperiment2(exp2)
library(dief)
plotExperiment2(exp2)
library(dief)
plotExperiment2(exp2)
library(dief)
plotExperiment2(exp2)
library(dief)
plotExperiment2(exp2)
library(dief)
plotExperiment2(exp2)
library(dief)
plotExperiment2(exp2)
library(dief)
plotExperiment2(exp2)
plotExperiment2(exp2)
library(dief)
plotExperiment2(exp2)
library(dief)
plotExperiment2(exp2)
library(dief)
plotExperiment2(exp2)
library(dief)
plotExperiment2(exp2)
library(dief)
plotExperiment2(exp2)
library(dief)
plotExperiment2(exp2)
plotExperiment2(exp2)
library(dief)
library(dief)
plotExperiment2(exp2)
library(dief)
plotExperiment2(exp2)
library(dief)
library(dief)
library(dief)
plotExperiment2(exp2)
library(dief)
library(dief)
library(dief)
library(dief)
install.packages("shiny")
library(dief)
library(devtools)
install.packages("devtools")
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library(dief)
library(dief)
detach("package:plyr", unload=TRUE)
library("plyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
library(dief)
library(dief)
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library(dief)
library(dief)
library(dief)
library(dief)
library(dief)
library(dief)
library(dief)
library(dief)
traces_file <- ("data/example.csv")
traces_file
traces_file <- read.csv("data/example.csv")
traces_file
plotAnswerTrace(traces, "Q9.sparql")
plotAnswerTrace(answer_traces, "Q9.sparql")
traces <- read.csv("data/example.csv")
plotAnswerTrace(traces, "Q9.sparql")
dieft(traces, "Q9.sparql", 16)
dieft(traces, "Q9.sparql")
library(dief)
dieft(traces, "Q9.sparql", 7.5)
library(dief)
cite(dief)
cite(dief)
cite{dief}
citation(dief)
citation("dief")
library(dief)
example("dief")
library(dief)
library(dief)
install.packages("testthat")
library("testthat", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
traces
save(traces, file="data/example.RData")
library(dief)
detach("package:testthat", unload=TRUE)
library(dief)
library(dief)
traces
save(traces, file="data/example.RData")
save(traces, file="data/example.RData")
library(dief)
library(dief)
save(traces, file="data/traces.RData")
library(dief)
library(dief)
library(dief)
library(dief)
library(dief)
library(dief)
library(dief)
library(dief)
data(traces)
traces <- data(traces)
traces
x <- data(traces)
x
library(dief)
traces
library(dief)
library(dief)
library(dief)
dief(traces, "Q9.sparql")
dieft(traces, "Q9.sparql")
library(dief)
library(dief)
dieft(traces, "Q9.sparql")
plotAnswerTrace(traces, "Q9.sparql")
citation(dief)
citation("dief")
library(dief)
library(dief)
library(dief)
library(dief)
